// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2021 22:35:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CiruitProblem3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CiruitProblem3_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	FSM_reset,
	reset_A,
	reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  FSM_reset;
input  reset_A;
input  reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or FSM_reset or reset_A or reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CiruitProblem3_vlg_check_tst (
	even,
	R1BI,
	R2BI,
	R_first4,
	R_LAST4,
	sign,
	Student_ID,
	sampler_rx
);
input [0:6] even;
input [0:3] R1BI;
input [0:3] R2BI;
input [0:6] R_first4;
input [0:6] R_LAST4;
input [0:6] sign;
input [0:6] Student_ID;
input sampler_rx;

reg [0:6] even_expected;
reg [0:3] R1BI_expected;
reg [0:3] R2BI_expected;
reg [0:6] R_first4_expected;
reg [0:6] R_LAST4_expected;
reg [0:6] sign_expected;
reg [0:6] Student_ID_expected;

reg [0:6] even_prev;
reg [0:3] R1BI_prev;
reg [0:3] R2BI_prev;
reg [0:6] R_first4_prev;
reg [0:6] R_LAST4_prev;
reg [0:6] sign_prev;
reg [0:6] Student_ID_prev;

reg [0:6] even_expected_prev;
reg [0:3] R1BI_expected_prev;
reg [0:3] R2BI_expected_prev;
reg [0:6] R_first4_expected_prev;
reg [0:6] R_LAST4_expected_prev;
reg [0:6] sign_expected_prev;
reg [0:6] Student_ID_expected_prev;

reg [0:6] last_even_exp;
reg [0:3] last_R1BI_exp;
reg [0:3] last_R2BI_exp;
reg [0:6] last_R_first4_exp;
reg [0:6] last_R_LAST4_exp;
reg [0:6] last_sign_exp;
reg [0:6] last_Student_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	even_prev = even;
	R1BI_prev = R1BI;
	R2BI_prev = R2BI;
	R_first4_prev = R_first4;
	R_LAST4_prev = R_LAST4;
	sign_prev = sign;
	Student_ID_prev = Student_ID;
end

// update expected /o prevs

always @(trigger)
begin
	even_expected_prev = even_expected;
	R1BI_expected_prev = R1BI_expected;
	R2BI_expected_prev = R2BI_expected;
	R_first4_expected_prev = R_first4_expected;
	R_LAST4_expected_prev = R_LAST4_expected;
	sign_expected_prev = sign_expected;
	Student_ID_expected_prev = Student_ID_expected;
end


// expected R2BI[ 3 ]
initial
begin
	R2BI_expected[3] = 1'bX;
end 
// expected R2BI[ 2 ]
initial
begin
	R2BI_expected[2] = 1'bX;
end 
// expected R2BI[ 1 ]
initial
begin
	R2BI_expected[1] = 1'bX;
end 
// expected R2BI[ 0 ]
initial
begin
	R2BI_expected[0] = 1'bX;
end 
// expected R1BI[ 3 ]
initial
begin
	R1BI_expected[3] = 1'bX;
end 
// expected R1BI[ 2 ]
initial
begin
	R1BI_expected[2] = 1'bX;
end 
// expected R1BI[ 1 ]
initial
begin
	R1BI_expected[1] = 1'bX;
end 
// expected R1BI[ 0 ]
initial
begin
	R1BI_expected[0] = 1'bX;
end 
// expected R_LAST4[ 6 ]
initial
begin
	R_LAST4_expected[6] = 1'bX;
end 
// expected R_LAST4[ 5 ]
initial
begin
	R_LAST4_expected[5] = 1'bX;
end 
// expected R_LAST4[ 4 ]
initial
begin
	R_LAST4_expected[4] = 1'bX;
end 
// expected R_LAST4[ 3 ]
initial
begin
	R_LAST4_expected[3] = 1'bX;
end 
// expected R_LAST4[ 2 ]
initial
begin
	R_LAST4_expected[2] = 1'bX;
end 
// expected R_LAST4[ 1 ]
initial
begin
	R_LAST4_expected[1] = 1'bX;
end 
// expected R_LAST4[ 0 ]
initial
begin
	R_LAST4_expected[0] = 1'bX;
end 
// expected R_first4[ 6 ]
initial
begin
	R_first4_expected[6] = 1'bX;
end 
// expected R_first4[ 5 ]
initial
begin
	R_first4_expected[5] = 1'bX;
end 
// expected R_first4[ 4 ]
initial
begin
	R_first4_expected[4] = 1'bX;
end 
// expected R_first4[ 3 ]
initial
begin
	R_first4_expected[3] = 1'bX;
end 
// expected R_first4[ 2 ]
initial
begin
	R_first4_expected[2] = 1'bX;
end 
// expected R_first4[ 1 ]
initial
begin
	R_first4_expected[1] = 1'bX;
end 
// expected R_first4[ 0 ]
initial
begin
	R_first4_expected[0] = 1'bX;
end 
// expected sign[ 6 ]
initial
begin
	sign_expected[6] = 1'bX;
end 
// expected sign[ 5 ]
initial
begin
	sign_expected[5] = 1'bX;
end 
// expected sign[ 4 ]
initial
begin
	sign_expected[4] = 1'bX;
end 
// expected sign[ 3 ]
initial
begin
	sign_expected[3] = 1'bX;
end 
// expected sign[ 2 ]
initial
begin
	sign_expected[2] = 1'bX;
end 
// expected sign[ 1 ]
initial
begin
	sign_expected[1] = 1'bX;
end 
// expected sign[ 0 ]
initial
begin
	sign_expected[0] = 1'bX;
end 
// expected Student_ID[ 6 ]
initial
begin
	Student_ID_expected[6] = 1'bX;
end 
// expected Student_ID[ 5 ]
initial
begin
	Student_ID_expected[5] = 1'bX;
end 
// expected Student_ID[ 4 ]
initial
begin
	Student_ID_expected[4] = 1'bX;
end 
// expected Student_ID[ 3 ]
initial
begin
	Student_ID_expected[3] = 1'bX;
end 
// expected Student_ID[ 2 ]
initial
begin
	Student_ID_expected[2] = 1'bX;
end 
// expected Student_ID[ 1 ]
initial
begin
	Student_ID_expected[1] = 1'bX;
end 
// expected Student_ID[ 0 ]
initial
begin
	Student_ID_expected[0] = 1'bX;
end 
// expected even[ 6 ]
initial
begin
	even_expected[6] = 1'bX;
end 
// expected even[ 5 ]
initial
begin
	even_expected[5] = 1'bX;
end 
// expected even[ 4 ]
initial
begin
	even_expected[4] = 1'bX;
end 
// expected even[ 3 ]
initial
begin
	even_expected[3] = 1'bX;
end 
// expected even[ 2 ]
initial
begin
	even_expected[2] = 1'bX;
end 
// expected even[ 1 ]
initial
begin
	even_expected[1] = 1'bX;
end 
// expected even[ 0 ]
initial
begin
	even_expected[0] = 1'bX;
end 
// generate trigger
always @(even_expected or even or R1BI_expected or R1BI or R2BI_expected or R2BI or R_first4_expected or R_first4 or R_LAST4_expected or R_LAST4 or sign_expected or sign or Student_ID_expected or Student_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected even = %b | expected R1BI = %b | expected R2BI = %b | expected R_first4 = %b | expected R_LAST4 = %b | expected sign = %b | expected Student_ID = %b | ",even_expected_prev,R1BI_expected_prev,R2BI_expected_prev,R_first4_expected_prev,R_LAST4_expected_prev,sign_expected_prev,Student_ID_expected_prev);
	$display("| real even = %b | real R1BI = %b | real R2BI = %b | real R_first4 = %b | real R_LAST4 = %b | real sign = %b | real Student_ID = %b | ",even_prev,R1BI_prev,R2BI_prev,R_first4_prev,R_LAST4_prev,sign_prev,Student_ID_prev);
`endif
	if (
		( even_expected_prev[0] !== 1'bx ) && ( even_prev[0] !== even_expected_prev[0] )
		&& ((even_expected_prev[0] !== last_even_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[0] = even_expected_prev[0];
	end
	if (
		( even_expected_prev[1] !== 1'bx ) && ( even_prev[1] !== even_expected_prev[1] )
		&& ((even_expected_prev[1] !== last_even_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[1] = even_expected_prev[1];
	end
	if (
		( even_expected_prev[2] !== 1'bx ) && ( even_prev[2] !== even_expected_prev[2] )
		&& ((even_expected_prev[2] !== last_even_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[2] = even_expected_prev[2];
	end
	if (
		( even_expected_prev[3] !== 1'bx ) && ( even_prev[3] !== even_expected_prev[3] )
		&& ((even_expected_prev[3] !== last_even_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[3] = even_expected_prev[3];
	end
	if (
		( even_expected_prev[4] !== 1'bx ) && ( even_prev[4] !== even_expected_prev[4] )
		&& ((even_expected_prev[4] !== last_even_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[4] = even_expected_prev[4];
	end
	if (
		( even_expected_prev[5] !== 1'bx ) && ( even_prev[5] !== even_expected_prev[5] )
		&& ((even_expected_prev[5] !== last_even_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[5] = even_expected_prev[5];
	end
	if (
		( even_expected_prev[6] !== 1'bx ) && ( even_prev[6] !== even_expected_prev[6] )
		&& ((even_expected_prev[6] !== last_even_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port even[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", even_expected_prev);
		$display ("     Real value = %b", even_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_even_exp[6] = even_expected_prev[6];
	end
	if (
		( R1BI_expected_prev[0] !== 1'bx ) && ( R1BI_prev[0] !== R1BI_expected_prev[0] )
		&& ((R1BI_expected_prev[0] !== last_R1BI_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1BI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1BI_expected_prev);
		$display ("     Real value = %b", R1BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1BI_exp[0] = R1BI_expected_prev[0];
	end
	if (
		( R1BI_expected_prev[1] !== 1'bx ) && ( R1BI_prev[1] !== R1BI_expected_prev[1] )
		&& ((R1BI_expected_prev[1] !== last_R1BI_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1BI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1BI_expected_prev);
		$display ("     Real value = %b", R1BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1BI_exp[1] = R1BI_expected_prev[1];
	end
	if (
		( R1BI_expected_prev[2] !== 1'bx ) && ( R1BI_prev[2] !== R1BI_expected_prev[2] )
		&& ((R1BI_expected_prev[2] !== last_R1BI_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1BI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1BI_expected_prev);
		$display ("     Real value = %b", R1BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1BI_exp[2] = R1BI_expected_prev[2];
	end
	if (
		( R1BI_expected_prev[3] !== 1'bx ) && ( R1BI_prev[3] !== R1BI_expected_prev[3] )
		&& ((R1BI_expected_prev[3] !== last_R1BI_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1BI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1BI_expected_prev);
		$display ("     Real value = %b", R1BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1BI_exp[3] = R1BI_expected_prev[3];
	end
	if (
		( R2BI_expected_prev[0] !== 1'bx ) && ( R2BI_prev[0] !== R2BI_expected_prev[0] )
		&& ((R2BI_expected_prev[0] !== last_R2BI_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2BI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2BI_expected_prev);
		$display ("     Real value = %b", R2BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2BI_exp[0] = R2BI_expected_prev[0];
	end
	if (
		( R2BI_expected_prev[1] !== 1'bx ) && ( R2BI_prev[1] !== R2BI_expected_prev[1] )
		&& ((R2BI_expected_prev[1] !== last_R2BI_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2BI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2BI_expected_prev);
		$display ("     Real value = %b", R2BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2BI_exp[1] = R2BI_expected_prev[1];
	end
	if (
		( R2BI_expected_prev[2] !== 1'bx ) && ( R2BI_prev[2] !== R2BI_expected_prev[2] )
		&& ((R2BI_expected_prev[2] !== last_R2BI_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2BI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2BI_expected_prev);
		$display ("     Real value = %b", R2BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2BI_exp[2] = R2BI_expected_prev[2];
	end
	if (
		( R2BI_expected_prev[3] !== 1'bx ) && ( R2BI_prev[3] !== R2BI_expected_prev[3] )
		&& ((R2BI_expected_prev[3] !== last_R2BI_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2BI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2BI_expected_prev);
		$display ("     Real value = %b", R2BI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2BI_exp[3] = R2BI_expected_prev[3];
	end
	if (
		( R_first4_expected_prev[0] !== 1'bx ) && ( R_first4_prev[0] !== R_first4_expected_prev[0] )
		&& ((R_first4_expected_prev[0] !== last_R_first4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[0] = R_first4_expected_prev[0];
	end
	if (
		( R_first4_expected_prev[1] !== 1'bx ) && ( R_first4_prev[1] !== R_first4_expected_prev[1] )
		&& ((R_first4_expected_prev[1] !== last_R_first4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[1] = R_first4_expected_prev[1];
	end
	if (
		( R_first4_expected_prev[2] !== 1'bx ) && ( R_first4_prev[2] !== R_first4_expected_prev[2] )
		&& ((R_first4_expected_prev[2] !== last_R_first4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[2] = R_first4_expected_prev[2];
	end
	if (
		( R_first4_expected_prev[3] !== 1'bx ) && ( R_first4_prev[3] !== R_first4_expected_prev[3] )
		&& ((R_first4_expected_prev[3] !== last_R_first4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[3] = R_first4_expected_prev[3];
	end
	if (
		( R_first4_expected_prev[4] !== 1'bx ) && ( R_first4_prev[4] !== R_first4_expected_prev[4] )
		&& ((R_first4_expected_prev[4] !== last_R_first4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[4] = R_first4_expected_prev[4];
	end
	if (
		( R_first4_expected_prev[5] !== 1'bx ) && ( R_first4_prev[5] !== R_first4_expected_prev[5] )
		&& ((R_first4_expected_prev[5] !== last_R_first4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[5] = R_first4_expected_prev[5];
	end
	if (
		( R_first4_expected_prev[6] !== 1'bx ) && ( R_first4_prev[6] !== R_first4_expected_prev[6] )
		&& ((R_first4_expected_prev[6] !== last_R_first4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_first4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_first4_expected_prev);
		$display ("     Real value = %b", R_first4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R_first4_exp[6] = R_first4_expected_prev[6];
	end
	if (
		( R_LAST4_expected_prev[0] !== 1'bx ) && ( R_LAST4_prev[0] !== R_LAST4_expected_prev[0] )
		&& ((R_LAST4_expected_prev[0] !== last_R_LAST4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[0] = R_LAST4_expected_prev[0];
	end
	if (
		( R_LAST4_expected_prev[1] !== 1'bx ) && ( R_LAST4_prev[1] !== R_LAST4_expected_prev[1] )
		&& ((R_LAST4_expected_prev[1] !== last_R_LAST4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[1] = R_LAST4_expected_prev[1];
	end
	if (
		( R_LAST4_expected_prev[2] !== 1'bx ) && ( R_LAST4_prev[2] !== R_LAST4_expected_prev[2] )
		&& ((R_LAST4_expected_prev[2] !== last_R_LAST4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[2] = R_LAST4_expected_prev[2];
	end
	if (
		( R_LAST4_expected_prev[3] !== 1'bx ) && ( R_LAST4_prev[3] !== R_LAST4_expected_prev[3] )
		&& ((R_LAST4_expected_prev[3] !== last_R_LAST4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[3] = R_LAST4_expected_prev[3];
	end
	if (
		( R_LAST4_expected_prev[4] !== 1'bx ) && ( R_LAST4_prev[4] !== R_LAST4_expected_prev[4] )
		&& ((R_LAST4_expected_prev[4] !== last_R_LAST4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[4] = R_LAST4_expected_prev[4];
	end
	if (
		( R_LAST4_expected_prev[5] !== 1'bx ) && ( R_LAST4_prev[5] !== R_LAST4_expected_prev[5] )
		&& ((R_LAST4_expected_prev[5] !== last_R_LAST4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[5] = R_LAST4_expected_prev[5];
	end
	if (
		( R_LAST4_expected_prev[6] !== 1'bx ) && ( R_LAST4_prev[6] !== R_LAST4_expected_prev[6] )
		&& ((R_LAST4_expected_prev[6] !== last_R_LAST4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_LAST4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_LAST4_expected_prev);
		$display ("     Real value = %b", R_LAST4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_LAST4_exp[6] = R_LAST4_expected_prev[6];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( Student_ID_expected_prev[0] !== 1'bx ) && ( Student_ID_prev[0] !== Student_ID_expected_prev[0] )
		&& ((Student_ID_expected_prev[0] !== last_Student_ID_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[0] = Student_ID_expected_prev[0];
	end
	if (
		( Student_ID_expected_prev[1] !== 1'bx ) && ( Student_ID_prev[1] !== Student_ID_expected_prev[1] )
		&& ((Student_ID_expected_prev[1] !== last_Student_ID_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[1] = Student_ID_expected_prev[1];
	end
	if (
		( Student_ID_expected_prev[2] !== 1'bx ) && ( Student_ID_prev[2] !== Student_ID_expected_prev[2] )
		&& ((Student_ID_expected_prev[2] !== last_Student_ID_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[2] = Student_ID_expected_prev[2];
	end
	if (
		( Student_ID_expected_prev[3] !== 1'bx ) && ( Student_ID_prev[3] !== Student_ID_expected_prev[3] )
		&& ((Student_ID_expected_prev[3] !== last_Student_ID_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[3] = Student_ID_expected_prev[3];
	end
	if (
		( Student_ID_expected_prev[4] !== 1'bx ) && ( Student_ID_prev[4] !== Student_ID_expected_prev[4] )
		&& ((Student_ID_expected_prev[4] !== last_Student_ID_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[4] = Student_ID_expected_prev[4];
	end
	if (
		( Student_ID_expected_prev[5] !== 1'bx ) && ( Student_ID_prev[5] !== Student_ID_expected_prev[5] )
		&& ((Student_ID_expected_prev[5] !== last_Student_ID_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[5] = Student_ID_expected_prev[5];
	end
	if (
		( Student_ID_expected_prev[6] !== 1'bx ) && ( Student_ID_prev[6] !== Student_ID_expected_prev[6] )
		&& ((Student_ID_expected_prev[6] !== last_Student_ID_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Student_ID_exp[6] = Student_ID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CiruitProblem3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg FSM_reset;
reg reset_A;
reg reset_B;
// wires                                               
wire [0:6] even;
wire [0:3] R1BI;
wire [0:3] R2BI;
wire [0:6] R_first4;
wire [0:6] R_LAST4;
wire [0:6] sign;
wire [0:6] Student_ID;

wire sampler;                             

// assign statements (if any)                          
CiruitProblem3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.even(even),
	.FSM_reset(FSM_reset),
	.R1BI(R1BI),
	.R2BI(R2BI),
	.R_first4(R_first4),
	.R_LAST4(R_LAST4),
	.reset_A(reset_A),
	.reset_B(reset_B),
	.sign(sign),
	.Student_ID(Student_ID)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

// Clock
initial
begin
	Clock = 1'b1;
	Clock = #20000 1'b0;
	# 20000;
	repeat(23)
	begin
		Clock = 1'b1;
		Clock = #20000 1'b0;
		# 20000;
	end
	Clock = 1'b1;
	Clock = #20000 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// FSM_reset
initial
begin
	FSM_reset = 1'b0;
end 

// reset_A
initial
begin
	reset_A = 1'b1;
end 

// reset_B
initial
begin
	reset_B = 1'b1;
end 

CiruitProblem3_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.FSM_reset(FSM_reset),
	.reset_A(reset_A),
	.reset_B(reset_B),
	.sampler_tx(sampler)
);

CiruitProblem3_vlg_check_tst tb_out(
	.even(even),
	.R1BI(R1BI),
	.R2BI(R2BI),
	.R_first4(R_first4),
	.R_LAST4(R_LAST4),
	.sign(sign),
	.Student_ID(Student_ID),
	.sampler_rx(sampler)
);
endmodule

