// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2021 13:17:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuit_vlg_sample_tst(
	Clear,
	Clock,
	Enable,
	pin_name1,
	sampler_tx
);
input  Clear;
input  Clock;
input  Enable;
input  pin_name1;
output sampler_tx;

reg sample;
time current_time;
always @(Clear or Clock or Enable or pin_name1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuit_vlg_check_tst (
	leds,
	neg,
	Q,
	sampler_rx
);
input [1:7] leds;
input [1:7] neg;
input [0:2] Q;
input sampler_rx;

reg [1:7] leds_expected;
reg [1:7] neg_expected;
reg [0:2] Q_expected;

reg [1:7] leds_prev;
reg [1:7] neg_prev;
reg [0:2] Q_prev;

reg [1:7] leds_expected_prev;
reg [1:7] neg_expected_prev;
reg [0:2] Q_expected_prev;

reg [1:7] last_leds_exp;
reg [1:7] last_neg_exp;
reg [0:2] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	leds_prev = leds;
	neg_prev = neg;
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	leds_expected_prev = leds_expected;
	neg_expected_prev = neg_expected;
	Q_expected_prev = Q_expected;
end



// expected leds[1]
initial
begin
	leds_expected[1] = 1'bX;
end 

// expected leds[2]
initial
begin
	leds_expected[2] = 1'bX;
end 

// expected leds[3]
initial
begin
	leds_expected[3] = 1'bX;
end 

// expected leds[4]
initial
begin
	leds_expected[4] = 1'bX;
end 

// expected leds[5]
initial
begin
	leds_expected[5] = 1'bX;
end 

// expected leds[6]
initial
begin
	leds_expected[6] = 1'bX;
end 

// expected leds[7]
initial
begin
	leds_expected[7] = 1'bX;
end 

// expected neg[1]
initial
begin
	neg_expected[1] = 1'bX;
end 

// expected neg[2]
initial
begin
	neg_expected[2] = 1'bX;
end 

// expected neg[3]
initial
begin
	neg_expected[3] = 1'bX;
end 

// expected neg[4]
initial
begin
	neg_expected[4] = 1'bX;
end 

// expected neg[5]
initial
begin
	neg_expected[5] = 1'bX;
end 

// expected neg[6]
initial
begin
	neg_expected[6] = 1'bX;
end 

// expected neg[7]
initial
begin
	neg_expected[7] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// generate trigger
always @(leds_expected or leds or neg_expected or neg or Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected leds = %b | expected neg = %b | expected Q = %b | ",leds_expected_prev,neg_expected_prev,Q_expected_prev);
	$display("| real leds = %b | real neg = %b | real Q = %b | ",leds_prev,neg_prev,Q_prev);
`endif
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( leds_expected_prev[4] !== 1'bx ) && ( leds_prev[4] !== leds_expected_prev[4] )
		&& ((leds_expected_prev[4] !== last_leds_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[4] = leds_expected_prev[4];
	end
	if (
		( leds_expected_prev[5] !== 1'bx ) && ( leds_prev[5] !== leds_expected_prev[5] )
		&& ((leds_expected_prev[5] !== last_leds_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[5] = leds_expected_prev[5];
	end
	if (
		( leds_expected_prev[6] !== 1'bx ) && ( leds_prev[6] !== leds_expected_prev[6] )
		&& ((leds_expected_prev[6] !== last_leds_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leds_exp[6] = leds_expected_prev[6];
	end
	if (
		( neg_expected_prev[0] !== 1'bx ) && ( neg_prev[0] !== neg_expected_prev[0] )
		&& ((neg_expected_prev[0] !== last_neg_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[0] = neg_expected_prev[0];
	end
	if (
		( neg_expected_prev[1] !== 1'bx ) && ( neg_prev[1] !== neg_expected_prev[1] )
		&& ((neg_expected_prev[1] !== last_neg_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[1] = neg_expected_prev[1];
	end
	if (
		( neg_expected_prev[2] !== 1'bx ) && ( neg_prev[2] !== neg_expected_prev[2] )
		&& ((neg_expected_prev[2] !== last_neg_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[2] = neg_expected_prev[2];
	end
	if (
		( neg_expected_prev[3] !== 1'bx ) && ( neg_prev[3] !== neg_expected_prev[3] )
		&& ((neg_expected_prev[3] !== last_neg_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[3] = neg_expected_prev[3];
	end
	if (
		( neg_expected_prev[4] !== 1'bx ) && ( neg_prev[4] !== neg_expected_prev[4] )
		&& ((neg_expected_prev[4] !== last_neg_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[4] = neg_expected_prev[4];
	end
	if (
		( neg_expected_prev[5] !== 1'bx ) && ( neg_prev[5] !== neg_expected_prev[5] )
		&& ((neg_expected_prev[5] !== last_neg_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[5] = neg_expected_prev[5];
	end
	if (
		( neg_expected_prev[6] !== 1'bx ) && ( neg_prev[6] !== neg_expected_prev[6] )
		&& ((neg_expected_prev[6] !== last_neg_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg_expected_prev);
		$display ("     Real value = %b", neg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_neg_exp[6] = neg_expected_prev[6];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module circuit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clear;
reg Clock;
reg Enable;
reg pin_name1;
// wires                                               
wire [1:7] leds;
wire [1:7] neg;
wire [0:2] Q;

wire sampler;                             

// assign statements (if any)                          
circuit i1 (
// port map - connection between master ports and signals/registers   
	.Clear(Clear),
	.Clock(Clock),
	.Enable(Enable),
	.leds(leds),
	.neg(neg),
	.pin_name1(pin_name1),
	.Q(Q)
);

// Clear
initial
begin
	Clear = 1'b1;
end 

// Clock
initial
begin
	repeat(12)
	begin
		Clock = 1'b0;
		Clock = #40000 1'b1;
		# 40000;
	end
	Clock = 1'b0;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

circuit_vlg_sample_tst tb_sample (
	.Clear(Clear),
	.Clock(Clock),
	.Enable(Enable),
	.pin_name1(pin_name1),
	.sampler_tx(sampler)
);

circuit_vlg_check_tst tb_out(
	.leds(leds),
	.neg(neg),
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

